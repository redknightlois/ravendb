using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Sparrow.Server.Utils.VxSort;
using Xunit;
using Xunit.Abstractions;

namespace FastTests.Sparrow.VxSort
{

    public class CorruptionBugs : NoDisposalNeeded
    {
        public CorruptionBugs(ITestOutputHelper output) : base(output)
        {
        }

        [Fact]
        public void UnsignedUlongCorruption()
        {
            var nums = new ulong[]
            {
                 100211515000000000,  102378761790000001,  102463007930000002,  102463196797000003,  103015829970000004,  103529909253700005,  105554679732600005,
                 106399070000000000,  576585357030000001,  576585436120000002,  576589463178000003,  577868187310000004,  577868190424100005,  577985194589800005,
                 578002267000000000,  585444222540000001,  592711773070000002,  602962470144000003,  603016706890000004,  603016706893200005,  603016706893200005,
                 603016707000000000,  603016707010000001,  603017352930000002,  871340974779000003,  871801918900000004,  871899113012000005,  871903920424700005,
                 873698327000000000,  875818186120000001,  876946476700000002,  892557151149000003,  892644955310000004,  892680637126500005,  894342762034500005,
                 906350856000000000,  921543573660000001,  927264844470000002,  928339679038000003,  933678190240000004,  948007721561400005,  982910618673600005,
                 985107140000000000, 1017813515780000001, 1017813546120000002, 1017813546961000003, 1017813547050000004, 1017813547402900005, 1017813547427500005,
                1017813547000000000, 1018228581420000001, 1018261894930000002, 1027670345567000003, 1027680352720000004, 1027735302556300005, 1038537110946000005,
                1040006883000000000, 1040065329090000001, 1042667596760000002, 1042807922362000003, 1066058471100000004, 1066058471104800005, 1066058471112200005,
                1066058471000000000, 1066067005200000001, 1069591045690000002, 1072771397387000003, 1085827170740000004, 1085849744046500005, 1102913870269200005,
                1113771358000000000, 1113771358070000001, 1117669214130000002, 1146424215520000003, 1173328743810000004, 1173494878991000005, 1180074796805700005,
                1180460148000000000, 1186995722140000001, 1190600581320000002, 1200227992864000003, 1200257863890000004, 1206767421763000005, 1259041273137700005,
                1301012542000000000, 1301012698520000001, 1301073397950000002, 1301083086598000003, 1316062641880000004, 1316388298661100005, 1328298015083500005,
                1328298106000000000, 1335458027000000001, 1335458027000000002, 1335458027003000003, 1335458057340000004, 1335458057353600005, 1335458057829500005,
                1335458346000000000, 1337428352780000001, 1338413514250000002, 1338463215628000003, 1341245134840000004, 1342828938207900005, 1344062027137000005,
                1344172172000000000, 1345651114720000001, 1345651114720000002, 1346356386258000003, 1346356386250000004, 1346356386258200005, 1346356386258200005,
                1346356386000000000, 1346356386250000001, 1346356386250000002, 1346356386258000003, 1346356386250000004, 1346356386258200005, 1346356390046200005,
                1346356390000000000, 1346356390060000001, 1346356390210000002, 1346356390226000003, 1346356390220000004, 1346357092909000005, 1346357092909000005,
                1346357092000000000, 1346357092940000001, 1346357833600000002, 1346359031152000003, 1346359031150000004, 1347953979824200005, 1347993743757400005,
                1353439440000000000, 1369144569860000001, 1369804708670000002, 1371329594096000003, 1379513258900000004, 1386331007724000005, 1387158716029200005,
                1400607065000000000, 1400618877320000001, 1400618877330000002, 1405721242896000003, 1407618975130000004, 1407618975620400005, 1412177550343400005,
                1420403144000000000, 1426902210060000001, 1426902225430000002, 1427218885284000003, 1427308367930000004, 1445109406418400005, 1454911925213200005,
                1454943742000000000, 1454943767710000001, 1454944871590000002, 1464437338259000003, 1482052907300000004, 1483936077218500005, 1489778882008500005,
                1489778882000000000, 1489811875360000001, 1489961276380000002, 1489961276384000003, 1489961276380000004, 1489961276384700005, 1489961276385100005,
                1489961276000000000, 1489961276380000001, 1489961276380000002, 1489961276385000003, 1489961291160000004, 1489961291199000005, 1490391191289000005,
                1492590777000000000, 1493651254580000001, 1494350651350000002, 1494350658940000003, 1494350659150000004, 1494350659338300005, 1494350659364700005,
                1494350659000000000, 1499560450280000001, 1506385905630000002, 1507301918416000003, 1508552596370000004, 1516521205723600005, 1516521205723600005,
            };

            HashSet<ulong> content = new(nums);
            
            Sort.Run(nums);
            foreach (var n in nums)
            {
                if (!content.Contains(n))
                    Console.WriteLine($"Not found: {n}");
                Assert.True(content.Contains(n));
            }
                
        }


    }
}
