/////////////////////////////////////////////////////////////////////////////
//
// This file was auto-generated by a tool at 2022-12-20 12:58:49
//
// It is recommended you DO NOT directly edit this file but instead edit
// the code-generator that generated this source file instead.
/////////////////////////////////////////////////////////////////////////////


using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using static System.Runtime.Intrinsics.X86.Avx;
using static System.Runtime.Intrinsics.X86.Avx2;
using static System.Runtime.Intrinsics.X86.Sse2;
using static System.Runtime.Intrinsics.X86.Sse41;
using static System.Runtime.Intrinsics.X86.Sse42;

namespace Sparrow.Server.Utils.VxSort
{
    using V = Vector256<double>;
    public static unsafe partial class BitonicSort
    {


        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_01v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = Or(MaskLoad(ptr +  V.Count * 0, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_01v_ascending(ref d01);
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }
      MaskStore(ptr +  V.Count * 0, mask, d01);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_02v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = Or(MaskLoad(ptr +  V.Count * 1, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_02v_ascending(ref d01, ref d02);
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      MaskStore(ptr +  V.Count * 1, mask, d02);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_03v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = Or(MaskLoad(ptr +  V.Count * 2, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_03v_ascending(ref d01, ref d02, ref d03);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      MaskStore(ptr +  V.Count * 2, mask, d03);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_04v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = Or(MaskLoad(ptr +  V.Count * 3, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_04v_ascending(ref d01, ref d02, ref d03, ref d04);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      MaskStore(ptr +  V.Count * 3, mask, d04);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_05v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = Or(MaskLoad(ptr +  V.Count * 4, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_05v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      MaskStore(ptr +  V.Count * 4, mask, d05);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_06v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = Or(MaskLoad(ptr +  V.Count * 5, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_06v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      MaskStore(ptr +  V.Count * 5, mask, d06);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_07v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = Or(MaskLoad(ptr +  V.Count * 6, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_07v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_03v_merge_ascending(ref d05, ref d06, ref d07); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      MaskStore(ptr +  V.Count * 6, mask, d07);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_08v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = Or(MaskLoad(ptr +  V.Count * 7, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_08v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      MaskStore(ptr +  V.Count * 7, mask, d08);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_09v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = Or(MaskLoad(ptr +  V.Count * 8, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_09v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      MaskStore(ptr +  V.Count * 8, mask, d09);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_10v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = Or(MaskLoad(ptr +  V.Count * 9, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_10v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      MaskStore(ptr +  V.Count * 9, mask, d10);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_11v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = Or(MaskLoad(ptr +  V.Count * 10, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_11v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_03v_merge_ascending(ref d09, ref d10, ref d11); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      MaskStore(ptr +  V.Count * 10, mask, d11);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_12v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = Or(MaskLoad(ptr +  V.Count * 11, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_12v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      MaskStore(ptr +  V.Count * 11, mask, d12);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_13v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = Or(MaskLoad(ptr +  V.Count * 12, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_13v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12, ref d13);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);

            s = Permute4x64(d13, 0x1B);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d13;
            
            d13 = Max(d12, d13);
            d12 = Min(d12, tmp);
        }
                        
        
        {
            //sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }   

        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
            tmp = d13;
            
            d13 = Max(d04, d13);
            d04 = Min(d04, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_05v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      Store((double *) (ptr +  V.Count * 11), d12);
      MaskStore(ptr +  V.Count * 12, mask, d13);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_14v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = Or(MaskLoad(ptr +  V.Count * 13, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_14v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_ascending(ref d13, ref d14);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);

            s = Permute4x64(d13, 0x1B);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);

            s = Permute4x64(d14, 0x1B);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d14;
            
            d14 = Max(d13, d14);
            d13 = Min(d13, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d13;
            
            d13 = Max(d12, d13);
            d12 = Min(d12, tmp);
            tmp = d14;
            
            d14 = Max(d11, d14);
            d11 = Min(d11, tmp);
        }
                        
        
        {
            //sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
            tmp = d13;
            
            d13 = Max(d04, d13);
            d04 = Min(d04, tmp);
            tmp = d14;
            
            d14 = Max(d03, d14);
            d03 = Min(d03, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_06v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      Store((double *) (ptr +  V.Count * 11), d12);
      Store((double *) (ptr +  V.Count * 12), d13);
      MaskStore(ptr +  V.Count * 13, mask, d14);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_15v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = Or(MaskLoad(ptr +  V.Count * 14, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_15v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_ascending(ref d13, ref d14, ref d15);
                             
            
        {
            //sort_01v_ascending(ref d13, ref d14);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);

            s = Permute4x64(d13, 0x1B);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);

            s = Permute4x64(d14, 0x1B);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d14;
            
            d14 = Max(d13, d14);
            d13 = Min(d13, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);

            s = Permute4x64(d15, 0x1B);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d15;
            
            d15 = Max(d14, d15);
            d14 = Min(d14, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d13;
            
            d13 = Max(d12, d13);
            d12 = Min(d12, tmp);
            tmp = d14;
            
            d14 = Max(d11, d14);
            d11 = Min(d11, tmp);
            tmp = d15;
            
            d15 = Max(d10, d15);
            d10 = Min(d10, tmp);
        }
                        
        
        {
            //sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_03v_merge_descending(ref d13, ref d14, ref d15); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }   

        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
            tmp = d13;
            
            d13 = Max(d04, d13);
            d04 = Min(d04, tmp);
            tmp = d14;
            
            d14 = Max(d03, d14);
            d03 = Min(d03, tmp);
            tmp = d15;
            
            d15 = Max(d02, d15);
            d02 = Min(d02, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_07v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_03v_merge_ascending(ref d13, ref d14, ref d15); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }   

        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      Store((double *) (ptr +  V.Count * 11), d12);
      Store((double *) (ptr +  V.Count * 12), d13);
      Store((double *) (ptr +  V.Count * 13), d14);
      MaskStore(ptr +  V.Count * 14, mask, d15);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_16v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = Or(MaskLoad(ptr +  V.Count * 15, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_16v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_ascending(ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d13, ref d14);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);

            s = Permute4x64(d13, 0x1B);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);

            s = Permute4x64(d14, 0x1B);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d14;
            
            d14 = Max(d13, d14);
            d13 = Min(d13, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);

            s = Permute4x64(d15, 0x1B);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);

            s = Permute4x64(d16, 0x1B);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d16;
            
            d16 = Max(d15, d16);
            d15 = Min(d15, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d15;
            
            d15 = Max(d14, d15);
            d14 = Min(d14, tmp);
            tmp = d16;
            
            d16 = Max(d13, d16);
            d13 = Min(d13, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d13;
            
            d13 = Max(d12, d13);
            d12 = Min(d12, tmp);
            tmp = d14;
            
            d14 = Max(d11, d14);
            d11 = Min(d11, tmp);
            tmp = d15;
            
            d15 = Max(d10, d15);
            d10 = Min(d10, tmp);
            tmp = d16;
            
            d16 = Max(d09, d16);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_descending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }   

        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
            tmp = d13;
            
            d13 = Max(d04, d13);
            d04 = Min(d04, tmp);
            tmp = d14;
            
            d14 = Max(d03, d14);
            d03 = Min(d03, tmp);
            tmp = d15;
            
            d15 = Max(d02, d15);
            d02 = Min(d02, tmp);
            tmp = d16;
            
            d16 = Max(d01, d16);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      Store((double *) (ptr +  V.Count * 11), d12);
      Store((double *) (ptr +  V.Count * 12), d13);
      Store((double *) (ptr +  V.Count * 13), d14);
      Store((double *) (ptr +  V.Count * 14), d15);
      MaskStore(ptr +  V.Count * 15, mask, d16);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_17v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = Or(MaskLoad(ptr +  V.Count * 16, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_17v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_ascending(ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d13, ref d14);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);

            s = Permute4x64(d13, 0x1B);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);

            s = Permute4x64(d14, 0x1B);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d14;
            
            d14 = Max(d13, d14);
            d13 = Min(d13, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);

            s = Permute4x64(d15, 0x1B);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);

            s = Permute4x64(d16, 0x1B);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d16;
            
            d16 = Max(d15, d16);
            d15 = Min(d15, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d15;
            
            d15 = Max(d14, d15);
            d14 = Min(d14, tmp);
            tmp = d16;
            
            d16 = Max(d13, d16);
            d13 = Min(d13, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d13;
            
            d13 = Max(d12, d13);
            d12 = Min(d12, tmp);
            tmp = d14;
            
            d14 = Max(d11, d14);
            d11 = Min(d11, tmp);
            tmp = d15;
            
            d15 = Max(d10, d15);
            d10 = Min(d10, tmp);
            tmp = d16;
            
            d16 = Max(d09, d16);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_descending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }   

        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
            tmp = d13;
            
            d13 = Max(d04, d13);
            d04 = Min(d04, tmp);
            tmp = d14;
            
            d14 = Max(d03, d14);
            d03 = Min(d03, tmp);
            tmp = d15;
            
            d15 = Max(d02, d15);
            d02 = Min(d02, tmp);
            tmp = d16;
            
            d16 = Max(d01, d16);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);

            s = Permute4x64(d17, 0x1B);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d17;
            
            d17 = Max(d16, d17);
            d16 = Min(d16, tmp);
        }
                        
        
        {
            //sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d09, d01);
            
            d09 = Max(d09, tmp);
            tmp = d02;
            
            d02 = Min(d10, d02);
            
            d10 = Max(d10, tmp);
            tmp = d03;
            
            d03 = Min(d11, d03);
            
            d11 = Max(d11, tmp);
            tmp = d04;
            
            d04 = Min(d12, d04);
            
            d12 = Max(d12, tmp);
            tmp = d05;
            
            d05 = Min(d13, d05);
            
            d13 = Max(d13, tmp);
            tmp = d06;
            
            d06 = Min(d14, d06);
            
            d14 = Max(d14, tmp);
            tmp = d07;
            
            d07 = Min(d15, d07);
            
            d15 = Max(d15, tmp);
            tmp = d08;
            
            d08 = Min(d16, d08);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                    
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }   

        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(min, max, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(min, max, 0xA);
        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      Store((double *) (ptr +  V.Count * 11), d12);
      Store((double *) (ptr +  V.Count * 12), d13);
      Store((double *) (ptr +  V.Count * 13), d14);
      Store((double *) (ptr +  V.Count * 14), d15);
      Store((double *) (ptr +  V.Count * 15), d16);
      MaskStore(ptr +  V.Count * 16, mask, d17);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_18v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = Or(MaskLoad(ptr +  V.Count * 17, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_18v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_ascending(ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d13, ref d14);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);

            s = Permute4x64(d13, 0x1B);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);

            s = Permute4x64(d14, 0x1B);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d14;
            
            d14 = Max(d13, d14);
            d13 = Min(d13, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);

            s = Permute4x64(d15, 0x1B);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);

            s = Permute4x64(d16, 0x1B);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d16;
            
            d16 = Max(d15, d16);
            d15 = Min(d15, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d15;
            
            d15 = Max(d14, d15);
            d14 = Min(d14, tmp);
            tmp = d16;
            
            d16 = Max(d13, d16);
            d13 = Min(d13, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d13;
            
            d13 = Max(d12, d13);
            d12 = Min(d12, tmp);
            tmp = d14;
            
            d14 = Max(d11, d14);
            d11 = Min(d11, tmp);
            tmp = d15;
            
            d15 = Max(d10, d15);
            d10 = Min(d10, tmp);
            tmp = d16;
            
            d16 = Max(d09, d16);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_descending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }   

        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
            tmp = d13;
            
            d13 = Max(d04, d13);
            d04 = Min(d04, tmp);
            tmp = d14;
            
            d14 = Max(d03, d14);
            d03 = Min(d03, tmp);
            tmp = d15;
            
            d15 = Max(d02, d15);
            d02 = Min(d02, tmp);
            tmp = d16;
            
            d16 = Max(d01, d16);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d17, ref d18);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);

            s = Permute4x64(d17, 0x1B);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);

            s = Permute4x64(d18, 0x1B);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d18;
            
            d18 = Max(d17, d18);
            d17 = Min(d17, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            
            s = Permute4x64(d18, 0x4E);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d17;
            
            d17 = Max(d16, d17);
            d16 = Min(d16, tmp);
            tmp = d18;
            
            d18 = Max(d15, d18);
            d15 = Min(d15, tmp);
        }
                        
        
        {
            //sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d09, d01);
            
            d09 = Max(d09, tmp);
            tmp = d02;
            
            d02 = Min(d10, d02);
            
            d10 = Max(d10, tmp);
            tmp = d03;
            
            d03 = Min(d11, d03);
            
            d11 = Max(d11, tmp);
            tmp = d04;
            
            d04 = Min(d12, d04);
            
            d12 = Max(d12, tmp);
            tmp = d05;
            
            d05 = Min(d13, d05);
            
            d13 = Max(d13, tmp);
            tmp = d06;
            
            d06 = Min(d14, d06);
            
            d14 = Max(d14, tmp);
            tmp = d07;
            
            d07 = Min(d15, d07);
            
            d15 = Max(d15, tmp);
            tmp = d08;
            
            d08 = Min(d16, d08);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                    
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d17, ref d18); 
            
        {
        V  tmp;
        
            tmp = d17;
            
            d17 = Min(d18, d17);
            
            d18 = Max(d18, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(min, max, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            
            s = Permute4x64(d18, 0x4E);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);
        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      Store((double *) (ptr +  V.Count * 11), d12);
      Store((double *) (ptr +  V.Count * 12), d13);
      Store((double *) (ptr +  V.Count * 13), d14);
      Store((double *) (ptr +  V.Count * 14), d15);
      Store((double *) (ptr +  V.Count * 15), d16);
      Store((double *) (ptr +  V.Count * 16), d17);
      MaskStore(ptr +  V.Count * 17, mask, d18);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_19v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = Or(MaskLoad(ptr +  V.Count * 18, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_19v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_ascending(ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d13, ref d14);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);

            s = Permute4x64(d13, 0x1B);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);

            s = Permute4x64(d14, 0x1B);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d14;
            
            d14 = Max(d13, d14);
            d13 = Min(d13, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);

            s = Permute4x64(d15, 0x1B);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);

            s = Permute4x64(d16, 0x1B);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d16;
            
            d16 = Max(d15, d16);
            d15 = Min(d15, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d15;
            
            d15 = Max(d14, d15);
            d14 = Min(d14, tmp);
            tmp = d16;
            
            d16 = Max(d13, d16);
            d13 = Min(d13, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d13;
            
            d13 = Max(d12, d13);
            d12 = Min(d12, tmp);
            tmp = d14;
            
            d14 = Max(d11, d14);
            d11 = Min(d11, tmp);
            tmp = d15;
            
            d15 = Max(d10, d15);
            d10 = Min(d10, tmp);
            tmp = d16;
            
            d16 = Max(d09, d16);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_descending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }   

        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
            tmp = d13;
            
            d13 = Max(d04, d13);
            d04 = Min(d04, tmp);
            tmp = d14;
            
            d14 = Max(d03, d14);
            d03 = Min(d03, tmp);
            tmp = d15;
            
            d15 = Max(d02, d15);
            d02 = Min(d02, tmp);
            tmp = d16;
            
            d16 = Max(d01, d16);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d17, ref d18, ref d19);
                             
            
        {
            //sort_01v_descending(ref d17, ref d18);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);

            s = Permute4x64(d17, 0x1B);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);

            s = Permute4x64(d18, 0x1B);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d18;
            
            d18 = Max(d17, d18);
            d17 = Min(d17, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            
            s = Permute4x64(d18, 0x4E);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);      
            
            V  min, max, s;
            

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xA);

            s = Permute4x64(d19, 0x1B);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xC);

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d19;
            
            d19 = Max(d18, d19);
            d18 = Min(d18, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d17, ref d18); 
            
        {
        V  tmp;
        
            tmp = d17;
            
            d17 = Min(d18, d17);
            
            d18 = Max(d18, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            
            s = Permute4x64(d18, 0x4E);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xA);
        }   

        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);      
            
            V  min, max, s;
            
            s = Permute4x64(d19, 0x4E);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(max, min, 0xC);

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d17;
            
            d17 = Max(d16, d17);
            d16 = Min(d16, tmp);
            tmp = d18;
            
            d18 = Max(d15, d18);
            d15 = Min(d15, tmp);
            tmp = d19;
            
            d19 = Max(d14, d19);
            d14 = Min(d14, tmp);
        }
                        
        
        {
            //sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d09, d01);
            
            d09 = Max(d09, tmp);
            tmp = d02;
            
            d02 = Min(d10, d02);
            
            d10 = Max(d10, tmp);
            tmp = d03;
            
            d03 = Min(d11, d03);
            
            d11 = Max(d11, tmp);
            tmp = d04;
            
            d04 = Min(d12, d04);
            
            d12 = Max(d12, tmp);
            tmp = d05;
            
            d05 = Min(d13, d05);
            
            d13 = Max(d13, tmp);
            tmp = d06;
            
            d06 = Min(d14, d06);
            
            d14 = Max(d14, tmp);
            tmp = d07;
            
            d07 = Min(d15, d07);
            
            d15 = Max(d15, tmp);
            tmp = d08;
            
            d08 = Min(d16, d08);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                    
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }   

        }                        
        
        {
            //sort_03v_merge_ascending(ref d17, ref d18, ref d19); 
            
        {
        V  tmp;
        
            tmp = d17;
            
            d17 = Min(d19, d17);
            
            d19 = Max(d19, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d17, ref d18); 
            
        {
        V  tmp;
        
            tmp = d17;
            
            d17 = Min(d18, d17);
            
            d18 = Max(d18, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(min, max, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            
            s = Permute4x64(d18, 0x4E);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);
        }   

        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);      
            
            V  min, max, s;
            
            s = Permute4x64(d19, 0x4E);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xC);

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xA);
        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      Store((double *) (ptr +  V.Count * 11), d12);
      Store((double *) (ptr +  V.Count * 12), d13);
      Store((double *) (ptr +  V.Count * 13), d14);
      Store((double *) (ptr +  V.Count * 14), d15);
      Store((double *) (ptr +  V.Count * 15), d16);
      Store((double *) (ptr +  V.Count * 16), d17);
      Store((double *) (ptr +  V.Count * 17), d18);
      MaskStore(ptr +  V.Count * 18, mask, d19);
     }

        [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.AggressiveOptimization)]
        private static void sort_20v_alt(double *ptr, int remainder) 
        {        
            var mask = Vector256.AsDouble(ConvertToVector256Int64(LoadVector128((sbyte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(mask_table_4)) + remainder * V.Count)));

      V d01 = LoadVector256(ptr + V.Count * 0);
      V d02 = LoadVector256(ptr + V.Count * 1);
      V d03 = LoadVector256(ptr + V.Count * 2);
      V d04 = LoadVector256(ptr + V.Count * 3);
      V d05 = LoadVector256(ptr + V.Count * 4);
      V d06 = LoadVector256(ptr + V.Count * 5);
      V d07 = LoadVector256(ptr + V.Count * 6);
      V d08 = LoadVector256(ptr + V.Count * 7);
      V d09 = LoadVector256(ptr + V.Count * 8);
      V d10 = LoadVector256(ptr + V.Count * 9);
      V d11 = LoadVector256(ptr + V.Count * 10);
      V d12 = LoadVector256(ptr + V.Count * 11);
      V d13 = LoadVector256(ptr + V.Count * 12);
      V d14 = LoadVector256(ptr + V.Count * 13);
      V d15 = LoadVector256(ptr + V.Count * 14);
      V d16 = LoadVector256(ptr + V.Count * 15);
      V d17 = LoadVector256(ptr + V.Count * 16);
      V d18 = LoadVector256(ptr + V.Count * 17);
      V d19 = LoadVector256(ptr + V.Count * 18);
      V d20 = Or(MaskLoad(ptr +  V.Count * 19, mask), AndNot(mask, Vector256.Create(double.MaxValue)));

            // sort_20v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20);
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02);
                             
            
        {
            //sort_01v_ascending(ref d01);      
            
            V  min, max, s;
            

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);

            s = Permute4x64(d01, 0x1B);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02);      
            
            V  min, max, s;
            

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);

            s = Permute4x64(d02, 0x1B);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d02;
            
            d02 = Max(d01, d02);
            d01 = Min(d01, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d03, ref d04);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);

            s = Permute4x64(d03, 0x1B);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);

            s = Permute4x64(d04, 0x1B);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d04;
            
            d04 = Max(d03, d04);
            d03 = Min(d03, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d03;
            
            d03 = Max(d02, d03);
            d02 = Min(d02, tmp);
            tmp = d04;
            
            d04 = Max(d01, d04);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d05, ref d06, ref d07, ref d08);
                             
            
        {
            //sort_01v_descending(ref d05, ref d06);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);

            s = Permute4x64(d05, 0x1B);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);

            s = Permute4x64(d06, 0x1B);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d06;
            
            d06 = Max(d05, d06);
            d05 = Min(d05, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d07, ref d08);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);

            s = Permute4x64(d07, 0x1B);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);

            s = Permute4x64(d08, 0x1B);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d08;
            
            d08 = Max(d07, d08);
            d07 = Min(d07, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d07;
            
            d07 = Max(d06, d07);
            d06 = Min(d06, tmp);
            tmp = d08;
            
            d08 = Max(d05, d08);
            d05 = Min(d05, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d05;
            
            d05 = Max(d04, d05);
            d04 = Min(d04, tmp);
            tmp = d06;
            
            d06 = Max(d03, d06);
            d03 = Min(d03, tmp);
            tmp = d07;
            
            d07 = Max(d02, d07);
            d02 = Min(d02, tmp);
            tmp = d08;
            
            d08 = Max(d01, d08);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10, ref d11, ref d12);
                             
            
        {
            //sort_01v_descending(ref d09, ref d10);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);

            s = Permute4x64(d09, 0x1B);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);

            s = Permute4x64(d10, 0x1B);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d10;
            
            d10 = Max(d09, d10);
            d09 = Min(d09, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d11, ref d12);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);

            s = Permute4x64(d11, 0x1B);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);

            s = Permute4x64(d12, 0x1B);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d12;
            
            d12 = Max(d11, d12);
            d11 = Min(d11, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d11;
            
            d11 = Max(d10, d11);
            d10 = Min(d10, tmp);
            tmp = d12;
            
            d12 = Max(d09, d12);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }
        }                        
            
        {
            //sort_01v_ascending(ref d13, ref d14, ref d15, ref d16);
                             
            
        {
            //sort_01v_ascending(ref d13, ref d14);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);

            s = Permute4x64(d13, 0x1B);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);

            s = Permute4x64(d14, 0x1B);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d14;
            
            d14 = Max(d13, d14);
            d13 = Min(d13, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }
        }                        
            
        {
            //sort_01v_descending(ref d15, ref d16);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);

            s = Permute4x64(d15, 0x1B);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);

            s = Permute4x64(d16, 0x1B);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d16;
            
            d16 = Max(d15, d16);
            d15 = Min(d15, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d15;
            
            d15 = Max(d14, d15);
            d14 = Min(d14, tmp);
            tmp = d16;
            
            d16 = Max(d13, d16);
            d13 = Min(d13, tmp);
        }
                        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d13;
            
            d13 = Max(d12, d13);
            d12 = Min(d12, tmp);
            tmp = d14;
            
            d14 = Max(d11, d14);
            d11 = Min(d11, tmp);
            tmp = d15;
            
            d15 = Max(d10, d15);
            d10 = Min(d10, tmp);
            tmp = d16;
            
            d16 = Max(d09, d16);
            d09 = Min(d09, tmp);
        }
                        
        
        {
            //sort_04v_merge_descending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(max, min, 0xA);
        }   

        }   

        }                        
        
        {
            //sort_04v_merge_descending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_descending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(max, min, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_descending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(max, min, 0xA);
        }   

        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d09;
            
            d09 = Max(d08, d09);
            d08 = Min(d08, tmp);
            tmp = d10;
            
            d10 = Max(d07, d10);
            d07 = Min(d07, tmp);
            tmp = d11;
            
            d11 = Max(d06, d11);
            d06 = Min(d06, tmp);
            tmp = d12;
            
            d12 = Max(d05, d12);
            d05 = Min(d05, tmp);
            tmp = d13;
            
            d13 = Max(d04, d13);
            d04 = Min(d04, tmp);
            tmp = d14;
            
            d14 = Max(d03, d14);
            d03 = Min(d03, tmp);
            tmp = d15;
            
            d15 = Max(d02, d15);
            d02 = Min(d02, tmp);
            tmp = d16;
            
            d16 = Max(d01, d16);
            d01 = Min(d01, tmp);
        }
                        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                        
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }
        }                        
            
        {
            //sort_01v_descending(ref d17, ref d18, ref d19, ref d20);
                             
            
        {
            //sort_01v_descending(ref d17, ref d18);
                             
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);

            s = Permute4x64(d17, 0x1B);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }                        
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);

            s = Permute4x64(d18, 0x1B);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d18;
            
            d18 = Max(d17, d18);
            d17 = Min(d17, tmp);
        }
                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }                        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            
            s = Permute4x64(d18, 0x4E);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xA);
        }
        }                        
            
        {
            //sort_01v_ascending(ref d19, ref d20);
                             
            
        {
            //sort_01v_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);      
            
            V  min, max, s;
            

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xA);

            s = Permute4x64(d19, 0x1B);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xC);

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xA);
        }                        
            
        {
            //sort_01v_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20);      
            
            V  min, max, s;
            

            s = Shuffle(d20, d20, 0x5);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(max, min, 0xA);

            s = Permute4x64(d20, 0x1B);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(max, min, 0xC);

            s = Shuffle(d20, d20, 0x5);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(max, min, 0xA);
        }            
        {
            V tmp;
            
            
            tmp = d20;
            
            d20 = Max(d19, d20);
            d19 = Min(d19, tmp);
        }
                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);      
            
            V  min, max, s;
            
            s = Permute4x64(d19, 0x4E);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xC);

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xA);
        }                        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20);      
            
            V  min, max, s;
            
            s = Permute4x64(d20, 0x4E);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(min, max, 0xC);

            s = Shuffle(d20, d20, 0x5);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(min, max, 0xA);
        }
        }            
        {
            V tmp;
            
            
            tmp = d19;
            
            d19 = Max(d18, d19);
            d18 = Min(d18, tmp);
            tmp = d20;
            
            d20 = Max(d17, d20);
            d17 = Min(d17, tmp);
        }
                        
        
        {
            //sort_02v_merge_descending(ref d17, ref d18); 
            
        {
        V  tmp;
        
            tmp = d17;
            
            d17 = Min(d18, d17);
            
            d18 = Max(d18, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            
            s = Permute4x64(d18, 0x4E);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(max, min, 0xA);
        }   

        }                        
        
        {
            //sort_02v_merge_descending(ref d19, ref d20); 
            
        {
        V  tmp;
        
            tmp = d19;
            
            d19 = Min(d20, d19);
            
            d20 = Max(d20, tmp);
        }   
        
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);      
            
            V  min, max, s;
            
            s = Permute4x64(d19, 0x4E);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(max, min, 0xC);

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(max, min, 0xA);
        }                    
        
        {        
            //sort_01v_merge_descending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20);      
            
            V  min, max, s;
            
            s = Permute4x64(d20, 0x4E);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(max, min, 0xC);

            s = Shuffle(d20, d20, 0x5);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(max, min, 0xA);
        }   

        }
        }            
        {
            V tmp;
            
            
            tmp = d17;
            
            d17 = Max(d16, d17);
            d16 = Min(d16, tmp);
            tmp = d18;
            
            d18 = Max(d15, d18);
            d15 = Min(d15, tmp);
            tmp = d19;
            
            d19 = Max(d14, d19);
            d14 = Min(d14, tmp);
            tmp = d20;
            
            d20 = Max(d13, d20);
            d13 = Min(d13, tmp);
        }
                        
        
        {
            //sort_16v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d09, d01);
            
            d09 = Max(d09, tmp);
            tmp = d02;
            
            d02 = Min(d10, d02);
            
            d10 = Max(d10, tmp);
            tmp = d03;
            
            d03 = Min(d11, d03);
            
            d11 = Max(d11, tmp);
            tmp = d04;
            
            d04 = Min(d12, d04);
            
            d12 = Max(d12, tmp);
            tmp = d05;
            
            d05 = Min(d13, d05);
            
            d13 = Max(d13, tmp);
            tmp = d06;
            
            d06 = Min(d14, d06);
            
            d14 = Max(d14, tmp);
            tmp = d07;
            
            d07 = Min(d15, d07);
            
            d15 = Max(d15, tmp);
            tmp = d08;
            
            d08 = Min(d16, d08);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_08v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d05, d01);
            
            d05 = Max(d05, tmp);
            tmp = d02;
            
            d02 = Min(d06, d02);
            
            d06 = Max(d06, tmp);
            tmp = d03;
            
            d03 = Min(d07, d03);
            
            d07 = Max(d07, tmp);
            tmp = d04;
            
            d04 = Min(d08, d04);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d01, ref d02, ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d03, d01);
            
            d03 = Max(d03, tmp);
            tmp = d02;
            
            d02 = Min(d04, d02);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d01, ref d02); 
            
        {
        V  tmp;
        
            tmp = d01;
            
            d01 = Min(d02, d01);
            
            d02 = Max(d02, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01);      
            
            V  min, max, s;
            
            s = Permute4x64(d01, 0x4E);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xC);

            s = Shuffle(d01, d01, 0x5);
            
            min = Min(s, d01);
            max = Max(s, d01);
            d01 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02);      
            
            V  min, max, s;
            
            s = Permute4x64(d02, 0x4E);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xC);

            s = Shuffle(d02, d02, 0x5);
            
            min = Min(s, d02);
            max = Max(s, d02);
            d02 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d03, ref d04); 
            
        {
        V  tmp;
        
            tmp = d03;
            
            d03 = Min(d04, d03);
            
            d04 = Max(d04, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03);      
            
            V  min, max, s;
            
            s = Permute4x64(d03, 0x4E);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xC);

            s = Shuffle(d03, d03, 0x5);
            
            min = Min(s, d03);
            max = Max(s, d03);
            d03 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04);      
            
            V  min, max, s;
            
            s = Permute4x64(d04, 0x4E);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xC);

            s = Shuffle(d04, d04, 0x5);
            
            min = Min(s, d04);
            max = Max(s, d04);
            d04 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d05, ref d06, ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d07, d05);
            
            d07 = Max(d07, tmp);
            tmp = d06;
            
            d06 = Min(d08, d06);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d05, ref d06); 
            
        {
        V  tmp;
        
            tmp = d05;
            
            d05 = Min(d06, d05);
            
            d06 = Max(d06, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05);      
            
            V  min, max, s;
            
            s = Permute4x64(d05, 0x4E);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xC);

            s = Shuffle(d05, d05, 0x5);
            
            min = Min(s, d05);
            max = Max(s, d05);
            d05 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06);      
            
            V  min, max, s;
            
            s = Permute4x64(d06, 0x4E);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xC);

            s = Shuffle(d06, d06, 0x5);
            
            min = Min(s, d06);
            max = Max(s, d06);
            d06 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d07, ref d08); 
            
        {
        V  tmp;
        
            tmp = d07;
            
            d07 = Min(d08, d07);
            
            d08 = Max(d08, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07);      
            
            V  min, max, s;
            
            s = Permute4x64(d07, 0x4E);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xC);

            s = Shuffle(d07, d07, 0x5);
            
            min = Min(s, d07);
            max = Max(s, d07);
            d07 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08);      
            
            V  min, max, s;
            
            s = Permute4x64(d08, 0x4E);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xC);

            s = Shuffle(d08, d08, 0x5);
            
            min = Min(s, d08);
            max = Max(s, d08);
            d08 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }                    
        
        {
            //sort_08v_merge_ascending(ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d13, d09);
            
            d13 = Max(d13, tmp);
            tmp = d10;
            
            d10 = Min(d14, d10);
            
            d14 = Max(d14, tmp);
            tmp = d11;
            
            d11 = Min(d15, d11);
            
            d15 = Max(d15, tmp);
            tmp = d12;
            
            d12 = Min(d16, d12);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_04v_merge_ascending(ref d09, ref d10, ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d11, d09);
            
            d11 = Max(d11, tmp);
            tmp = d10;
            
            d10 = Min(d12, d10);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d09, ref d10); 
            
        {
        V  tmp;
        
            tmp = d09;
            
            d09 = Min(d10, d09);
            
            d10 = Max(d10, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09);      
            
            V  min, max, s;
            
            s = Permute4x64(d09, 0x4E);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xC);

            s = Shuffle(d09, d09, 0x5);
            
            min = Min(s, d09);
            max = Max(s, d09);
            d09 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10);      
            
            V  min, max, s;
            
            s = Permute4x64(d10, 0x4E);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xC);

            s = Shuffle(d10, d10, 0x5);
            
            min = Min(s, d10);
            max = Max(s, d10);
            d10 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d11, ref d12); 
            
        {
        V  tmp;
        
            tmp = d11;
            
            d11 = Min(d12, d11);
            
            d12 = Max(d12, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11);      
            
            V  min, max, s;
            
            s = Permute4x64(d11, 0x4E);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xC);

            s = Shuffle(d11, d11, 0x5);
            
            min = Min(s, d11);
            max = Max(s, d11);
            d11 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12);      
            
            V  min, max, s;
            
            s = Permute4x64(d12, 0x4E);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xC);

            s = Shuffle(d12, d12, 0x5);
            
            min = Min(s, d12);
            max = Max(s, d12);
            d12 = Blend(min, max, 0xA);
        }   

        }   

        }                    
        
        {
            //sort_04v_merge_ascending(ref d13, ref d14, ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d15, d13);
            
            d15 = Max(d15, tmp);
            tmp = d14;
            
            d14 = Min(d16, d14);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d13, ref d14); 
            
        {
        V  tmp;
        
            tmp = d13;
            
            d13 = Min(d14, d13);
            
            d14 = Max(d14, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13);      
            
            V  min, max, s;
            
            s = Permute4x64(d13, 0x4E);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xC);

            s = Shuffle(d13, d13, 0x5);
            
            min = Min(s, d13);
            max = Max(s, d13);
            d13 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14);      
            
            V  min, max, s;
            
            s = Permute4x64(d14, 0x4E);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xC);

            s = Shuffle(d14, d14, 0x5);
            
            min = Min(s, d14);
            max = Max(s, d14);
            d14 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d15, ref d16); 
            
        {
        V  tmp;
        
            tmp = d15;
            
            d15 = Min(d16, d15);
            
            d16 = Max(d16, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15);      
            
            V  min, max, s;
            
            s = Permute4x64(d15, 0x4E);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xC);

            s = Shuffle(d15, d15, 0x5);
            
            min = Min(s, d15);
            max = Max(s, d15);
            d15 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16);      
            
            V  min, max, s;
            
            s = Permute4x64(d16, 0x4E);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xC);

            s = Shuffle(d16, d16, 0x5);
            
            min = Min(s, d16);
            max = Max(s, d16);
            d16 = Blend(min, max, 0xA);
        }   

        }   

        }   

        }   

        }                        
        
        {
            //sort_04v_merge_ascending(ref d17, ref d18, ref d19, ref d20); 
            
        {
        V  tmp;
        
            tmp = d17;
            
            d17 = Min(d19, d17);
            
            d19 = Max(d19, tmp);
            tmp = d18;
            
            d18 = Min(d20, d18);
            
            d20 = Max(d20, tmp);
        }   
        
        
        {
            //sort_02v_merge_ascending(ref d17, ref d18); 
            
        {
        V  tmp;
        
            tmp = d17;
            
            d17 = Min(d18, d17);
            
            d18 = Max(d18, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17);      
            
            V  min, max, s;
            
            s = Permute4x64(d17, 0x4E);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(min, max, 0xC);

            s = Shuffle(d17, d17, 0x5);
            
            min = Min(s, d17);
            max = Max(s, d17);
            d17 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18);      
            
            V  min, max, s;
            
            s = Permute4x64(d18, 0x4E);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xC);

            s = Shuffle(d18, d18, 0x5);
            
            min = Min(s, d18);
            max = Max(s, d18);
            d18 = Blend(min, max, 0xA);
        }   

        }                    
        
        {
            //sort_02v_merge_ascending(ref d19, ref d20); 
            
        {
        V  tmp;
        
            tmp = d19;
            
            d19 = Min(d20, d19);
            
            d20 = Max(d20, tmp);
        }   
        
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19);      
            
            V  min, max, s;
            
            s = Permute4x64(d19, 0x4E);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xC);

            s = Shuffle(d19, d19, 0x5);
            
            min = Min(s, d19);
            max = Max(s, d19);
            d19 = Blend(min, max, 0xA);
        }                    
        
        {        
            //sort_01v_merge_ascending(ref d01, ref d02, ref d03, ref d04, ref d05, ref d06, ref d07, ref d08, ref d09, ref d10, ref d11, ref d12, ref d13, ref d14, ref d15, ref d16, ref d17, ref d18, ref d19, ref d20);      
            
            V  min, max, s;
            
            s = Permute4x64(d20, 0x4E);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(min, max, 0xC);

            s = Shuffle(d20, d20, 0x5);
            
            min = Min(s, d20);
            max = Max(s, d20);
            d20 = Blend(min, max, 0xA);
        }   

        }   

        }
        }
      Store((double *) (ptr +  V.Count * 0), d01);
      Store((double *) (ptr +  V.Count * 1), d02);
      Store((double *) (ptr +  V.Count * 2), d03);
      Store((double *) (ptr +  V.Count * 3), d04);
      Store((double *) (ptr +  V.Count * 4), d05);
      Store((double *) (ptr +  V.Count * 5), d06);
      Store((double *) (ptr +  V.Count * 6), d07);
      Store((double *) (ptr +  V.Count * 7), d08);
      Store((double *) (ptr +  V.Count * 8), d09);
      Store((double *) (ptr +  V.Count * 9), d10);
      Store((double *) (ptr +  V.Count * 10), d11);
      Store((double *) (ptr +  V.Count * 11), d12);
      Store((double *) (ptr +  V.Count * 12), d13);
      Store((double *) (ptr +  V.Count * 13), d14);
      Store((double *) (ptr +  V.Count * 14), d15);
      Store((double *) (ptr +  V.Count * 15), d16);
      Store((double *) (ptr +  V.Count * 16), d17);
      Store((double *) (ptr +  V.Count * 17), d18);
      Store((double *) (ptr +  V.Count * 18), d19);
      MaskStore(ptr +  V.Count * 19, mask, d20);
     }
                
                                               
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static void Sort(double* ptr, int length)
        {                    
            if (length <= 1)
                return;
        
            uint fullvlength = (uint)length / (uint)V.Count;
            var remainder = (int)(length - fullvlength * V.Count);
            var v = fullvlength + ((remainder > 0) ? 1 : 0);
            switch (v)
            {
                
				case 1: sort_01v_alt(ptr, remainder); return; 
				case 2: sort_02v_alt(ptr, remainder); return; 
				case 3: sort_03v_alt(ptr, remainder); return; 
				case 4: sort_04v_alt(ptr, remainder); return; 
				case 5: sort_05v_alt(ptr, remainder); return; 
				case 6: sort_06v_alt(ptr, remainder); return; 
				case 7: sort_07v_alt(ptr, remainder); return; 
				case 8: sort_08v_alt(ptr, remainder); return; 
				case 9: sort_09v_alt(ptr, remainder); return; 
				case 10: sort_10v_alt(ptr, remainder); return; 
				case 11: sort_11v_alt(ptr, remainder); return; 
				case 12: sort_12v_alt(ptr, remainder); return; 
				case 13: sort_13v_alt(ptr, remainder); return; 
				case 14: sort_14v_alt(ptr, remainder); return; 
				case 15: sort_15v_alt(ptr, remainder); return; 
				case 16: sort_16v_alt(ptr, remainder); return; 
				case 17: sort_17v_alt(ptr, remainder); return; 
				case 18: sort_18v_alt(ptr, remainder); return; 
				case 19: sort_19v_alt(ptr, remainder); return; 
				case 20: sort_20v_alt(ptr, remainder); return; 
              
            }
            
            throw new NotSupportedException($"The length is too big for BitonicSort. Ensure the length is always smaller or equal to .MaxBitonicLength<T>()");
        }

    };
}
    
